const express = require('express');
const nodemailer = require('nodemailer');
const Summary = require('../models/Summary');
const EmailLog = require('../models/EmailLog');

const router = express.Router();

// POST /api/send-email - Send summary via email
router.post('/send-email', async (req, res) => {
  try {
    const { summaryId, recipients, subject, emailContent } = req.body;

    if (!recipients || !Array.isArray(recipients) || recipients.length === 0) {
      return res.status(400).json({ error: 'Recipients array is required' });
    }

    if (!subject || !emailContent) {
      return res.status(400).json({ error: 'Subject and email content are required' });
    }

    // Validate email addresses
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const invalidEmails = recipients.filter(email => !emailRegex.test(email));
    
    if (invalidEmails.length > 0) {
      return res.status(400).json({ 
        error: 'Invalid email addresses found',
        invalidEmails 
      });
    }

    // Check if summary exists (if summaryId provided)
    let summary = null;
    if (summaryId) {
      summary = await Summary.findById(summaryId);
      if (!summary) {
        return res.status(404).json({ error: 'Summary not found' });
      }
    }

    // Configure nodemailer transporter
    const transporter = nodemailer.createTransport({
      service: process.env.EMAIL_SERVICE || 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    // Verify transporter configuration
    try {
      await transporter.verify();
    } catch (verifyError) {
      console.error('Email configuration error:', verifyError);
      return res.status(500).json({ 
        error: 'Email service not configured properly',
        message: 'Please check your email credentials in environment variables'
      });
    }

    // Prepare email options
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: recipients.join(', '),
      subject: subject,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
            Meeting Summary
          </h2>
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0;">
            ${emailContent.replace(/\n/g, '<br>')}
          </div>
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #ddd;">
          <p style="color: #666; font-size: 12px;">
            This summary was generated by AI Meeting Notes Summarizer<br>
            Sent on ${new Date().toLocaleString()}
          </p>
        </div>
      `
    };

    // Send email
    let emailStatus = 'sent';
    let errorMessage = null;

    try {
      await transporter.sendMail(mailOptions);
      console.log('Email sent successfully to:', recipients);
    } catch (sendError) {
      console.error('Email sending error:', sendError);
      emailStatus = 'failed';
      errorMessage = sendError.message;
    }

    // Log email in database
    const emailLog = new EmailLog({
      summaryId: summaryId || null,
      recipients,
      subject,
      emailContent,
      status: emailStatus,
      errorMessage
    });

    await emailLog.save();

    if (emailStatus === 'sent') {
      res.json({
        message: 'Email sent successfully',
        recipients,
        sentAt: emailLog.sentAt
      });
    } else {
      res.status(500).json({
        error: 'Failed to send email',
        message: errorMessage,
        recipients
      });
    }

  } catch (error) {
    console.error('Email route error:', error);
    res.status(500).json({ 
      error: 'Failed to process email request',
      message: error.message 
    });
  }
});

// GET /api/email-logs - Get email logs
router.get('/email-logs', async (req, res) => {
  try {
    const emailLogs = await EmailLog.find()
      .populate('summaryId', 'customPrompt')
      .sort({ sentAt: -1 })
      .limit(50);
    
    res.json(emailLogs);
  } catch (error) {
    console.error('Error fetching email logs:', error);
    res.status(500).json({ 
      error: 'Failed to fetch email logs',
      message: error.message 
    });
  }
});

module.exports = router;
